<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MiKo_0001_Description" xml:space="preserve">
    <value>Methods should be short to ease reading and maintenance (SRP, SLoA).</value>
  </data>
  <data name="MiKo_0001_MessageFormat" xml:space="preserve">
    <value>Too many LoC: {1,4} (max. {2})</value>
  </data>
  <data name="MiKo_0001_Title" xml:space="preserve">
    <value>Method is too long.</value>
  </data>
  <data name="MiKo_0002_Description" xml:space="preserve">
    <value>Methods should be simple to ease maintenance (KISS).
Following code constructs increase the Cyclomatic Complexity (CC) by +1:
    if | while | for | foreach | case | continue | goto | &amp;&amp; | || | catch | catch when | ternary operator ?: | ?? | ?.</value>
  </data>
  <data name="MiKo_0002_MessageFormat" xml:space="preserve">
    <value>Too complex: {1,4} CC (max. {2})</value>
  </data>
  <data name="MiKo_0002_Title" xml:space="preserve">
    <value>Method is too complex.</value>
  </data>
  <data name="MiKo_0003_Description" xml:space="preserve">
    <value>Types should be limited in their size to ease reading and maintenance (SRP).</value>
  </data>
  <data name="MiKo_0003_MessageFormat" xml:space="preserve">
    <value>Too many LoC: {1,4} LoC (max. {2})</value>
  </data>
  <data name="MiKo_0003_Title" xml:space="preserve">
    <value>Type is too long.</value>
  </data>
  <data name="MiKo_1001_Description" xml:space="preserve">
    <value>To ease maintenance, parameters that inherit from 'System.EventArgs' should be named 'e' .</value>
  </data>
  <data name="MiKo_1001_HelpLinkUri" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event</value>
  </data>
  <data name="MiKo_1001_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1001_Title" xml:space="preserve">
    <value>'System.EventArgs' parameters on methods should be named properly.</value>
  </data>
  <data name="MiKo_1002_Description" xml:space="preserve">
    <value>To follow the .NET Framework Guidelines, parameters of event handlers should be named 'sender' and 'e'.</value>
  </data>
  <data name="MiKo_1002_HelpLinkUri" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event</value>
  </data>
  <data name="MiKo_1002_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1002_Title" xml:space="preserve">
    <value>Parameter names do not follow .NET Framework Guidelines for event handlers.</value>
  </data>
  <data name="MiKo_1003_Description" xml:space="preserve">
    <value>Event handlers should start with 'On' to indicate that they handle events.</value>
  </data>
  <data name="MiKo_1003_HelpLinkUri" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/dotnet/csharp/event-pattern</value>
  </data>
  <data name="MiKo_1003_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1003_Title" xml:space="preserve">
    <value>Name of event handler does not follow the .NET Framework Best Practices.</value>
  </data>
  <data name="MiKo_1004_Description" xml:space="preserve">
    <value>'Event' as suffix in event names are noise and should be avoided.</value>
  </data>
  <data name="MiKo_1004_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1004_Title" xml:space="preserve">
    <value>Events should not contain term 'Event' in their names.</value>
  </data>
  <data name="MiKo_1005_Description" xml:space="preserve">
    <value>To ease maintenance, variables that are of type 'System.EventArgs' (or any inheritors) should be named 'e'.</value>
  </data>
  <data name="MiKo_1005_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1005_Title" xml:space="preserve">
    <value>'System.EventArgs' variables should be named properly.</value>
  </data>
  <data name="MiKo_1010_Description" xml:space="preserve">
    <value>The purpose of methods is to execute code, so it's useless and repetitive to have 'CanExecute' or 'Execute' in their names.</value>
  </data>
  <data name="MiKo_1010_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1010_Title" xml:space="preserve">
    <value>Methods should not contain 'Do' in their names.</value>
  </data>
  <data name="MiKo_1011_Description" xml:space="preserve">
    <value>The purpose of methods is to execute code, so it's useless and repetitive to have 'Do' in their names.</value>
  </data>
  <data name="MiKo_1011_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1011_Title" xml:space="preserve">
    <value>Methods should not contain 'CanExecute' or 'Execute' in their names.</value>
  </data>
  <data name="MiKo_1012_Description" xml:space="preserve">
    <value>The term 'Fire' is a negative term. Employees get fired (or guns), but not events. Events get raised. So use 'Raise' instead.</value>
  </data>
  <data name="MiKo_1012_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1012_Title" xml:space="preserve">
    <value>Methods should not be named 'Fire'.</value>
  </data>
  <data name="MiKo_1013_Description" xml:space="preserve">
    <value>The term 'Check' is ambiguous. If validation of parameters is meant, use something like 'Validate' or 'Verify'. If a check for a specific state is meant, use 'Is', 'Can' or 'Has' instead.</value>
  </data>
  <data name="MiKo_1013_MessageFormat" xml:space="preserve">
    <value>'{0}' contains ambiguous term 'Check'</value>
  </data>
  <data name="MiKo_1013_Title" xml:space="preserve">
    <value>Methods should not be named 'Check'.</value>
  </data>
  <data name="MiKo_1014_Description" xml:space="preserve">
    <value>The term 'Init' is a lazy abbreviation and should not be used. 'Initialize' should be used instead.</value>
  </data>
  <data name="MiKo_1014_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1014_Title" xml:space="preserve">
    <value>Methods should not be named 'Init'.</value>
  </data>
  <data name="MiKo_1015_Description" xml:space="preserve">
    <value>The method belongs to a factory and therefore its name should be started with 'Create'.</value>
  </data>
  <data name="MiKo_1015_MessageFormat" xml:space="preserve">
    <value>Name should start with 'Create'</value>
  </data>
  <data name="MiKo_1015_Title" xml:space="preserve">
    <value>Factory methods should be named 'Create'.</value>
  </data>
  <data name="MiKo_1020_Description" xml:space="preserve">
    <value>Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder.</value>
  </data>
  <data name="MiKo_1020_MessageFormat" xml:space="preserve">
    <value>Type name exceeds limit of {2} chars by {1}</value>
  </data>
  <data name="MiKo_1020_Title" xml:space="preserve">
    <value>Type names should be limited in length.</value>
  </data>
  <data name="MiKo_1021_Description" xml:space="preserve">
    <value>Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder.</value>
  </data>
  <data name="MiKo_1021_MessageFormat" xml:space="preserve">
    <value>Method name exceeds limit of {2} chars by {1}</value>
  </data>
  <data name="MiKo_1021_Title" xml:space="preserve">
    <value>Method names should be limited in length.</value>
  </data>
  <data name="MiKo_1022_Description" xml:space="preserve">
    <value>Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder.</value>
  </data>
  <data name="MiKo_1022_MessageFormat" xml:space="preserve">
    <value>Parameter name exceeds limit of {2} chars by {1}</value>
  </data>
  <data name="MiKo_1022_Title" xml:space="preserve">
    <value>Parameter names should be limited in length.</value>
  </data>
  <data name="MiKo_1023_Description" xml:space="preserve">
    <value>Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder.</value>
  </data>
  <data name="MiKo_1023_MessageFormat" xml:space="preserve">
    <value>Field name exceeds limit of {2} chars by {1}</value>
  </data>
  <data name="MiKo_1023_Title" xml:space="preserve">
    <value>Field names should be limited in length.</value>
  </data>
  <data name="MiKo_1024_Description" xml:space="preserve">
    <value>Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder.</value>
  </data>
  <data name="MiKo_1024_MessageFormat" xml:space="preserve">
    <value>Property name exceeds limit of {2} chars by {1}</value>
  </data>
  <data name="MiKo_1024_Title" xml:space="preserve">
    <value>Property names should be limited in length.</value>
  </data>
  <data name="MiKo_1025_Description" xml:space="preserve">
    <value>Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder.</value>
  </data>
  <data name="MiKo_1025_MessageFormat" xml:space="preserve">
    <value>Event name exceeds limit of {2} chars by {1}</value>
  </data>
  <data name="MiKo_1025_Title" xml:space="preserve">
    <value>Event names should be limited in length.</value>
  </data>
  <data name="MiKo_1026_Description" xml:space="preserve">
    <value>Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder.</value>
  </data>
  <data name="MiKo_1026_MessageFormat" xml:space="preserve">
    <value>Variable name exceeds limit of {2} chars by {1}</value>
  </data>
  <data name="MiKo_1026_Title" xml:space="preserve">
    <value>Variable names should be limited in length.</value>
  </data>
  <data name="MiKo_1030_Description" xml:space="preserve">
    <value>Indicating that a type is a base type by putting 'Base' in its name does not make sense. Every interface or class that is not sealed can act as a base class.</value>
  </data>
  <data name="MiKo_1030_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1030_Title" xml:space="preserve">
    <value>Types should not have a 'Base' marker to indicate that they are base types.</value>
  </data>
  <data name="MiKo_1031_Description" xml:space="preserve">
    <value>Indicating that a type is an entity by using 'Model' as its suffix does not make sense. Entities should not be suffixed at all. (eg. 'User' instead of 'UserModel')</value>
  </data>
  <data name="MiKo_1031_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1031_Title" xml:space="preserve">
    <value>Entity types should not use a 'Model' suffix.</value>
  </data>
  <data name="MiKo_1032_Description" xml:space="preserve">
    <value>Indicating that a method deals with an entity by using 'Model' in its name does not make sense.</value>
  </data>
  <data name="MiKo_1032_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1032_Title" xml:space="preserve">
    <value>Methods dealing with entities should not use a 'Model' marker.</value>
  </data>
  <data name="MiKo_1033_Description" xml:space="preserve">
    <value>Indicating that a parameter is an entity by using 'Model' as its suffix does not make sense. Entities should not be suffixed at all. (eg. 'user' instead of 'userModel')</value>
  </data>
  <data name="MiKo_1033_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1033_Title" xml:space="preserve">
    <value>Parameters representing entities should not use a 'Model' suffix.</value>
  </data>
  <data name="MiKo_1034_Description" xml:space="preserve">
    <value>Indicating that a field is an entity by using 'Model' as its suffix does not make sense. Entities should not be suffixed at all. (eg. 'user' instead of 'userModel')</value>
  </data>
  <data name="MiKo_1034_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1034_Title" xml:space="preserve">
    <value>Fields representing entities should not use a 'Model' suffix.</value>
  </data>
  <data name="MiKo_1035_Description" xml:space="preserve">
    <value>Indicating that a property deals with an entity by using 'Model' in its name does not make sense.</value>
  </data>
  <data name="MiKo_1035_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1035_Title" xml:space="preserve">
    <value>Properties dealing with entities should not use a 'Model' marker.</value>
  </data>
  <data name="MiKo_1036_Description" xml:space="preserve">
    <value>Indicating that an event deals with an entity by using 'Model' in its name does not make sense.</value>
  </data>
  <data name="MiKo_1036_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1036_Title" xml:space="preserve">
    <value>Events dealing with entities should not use a 'Model' marker.</value>
  </data>
  <data name="MiKo_1037_Description" xml:space="preserve">
    <value>Indicating that a type is an Enum by using 'Enum' as its suffix does not make sense.</value>
  </data>
  <data name="MiKo_1037_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1037_Title" xml:space="preserve">
    <value>Types should not be suffixed with 'Enum'.</value>
  </data>
  <data name="MiKo_1040_Description" xml:space="preserve">
    <value>Suffixes on parameter names (such as 'List') are noise and should be avoided.</value>
  </data>
  <data name="MiKo_1040_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1040_Title" xml:space="preserve">
    <value>Parameters should not be suffixed with implementation details.</value>
  </data>
  <data name="MiKo_1041_Description" xml:space="preserve">
    <value>Suffixes on field names (such as 'List') are noise and should be avoided.</value>
  </data>
  <data name="MiKo_1041_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1041_Title" xml:space="preserve">
    <value>Fields should not be suffixed with implementation details.</value>
  </data>
  <data name="MiKo_1101_Description" xml:space="preserve">
    <value>A class that is marked as a unit test class should indicate that by the suffix 'Tests' as it normally contains multiple tests.</value>
  </data>
  <data name="MiKo_1101_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1101_Title" xml:space="preserve">
    <value>Test classes should end with 'Tests'.</value>
  </data>
  <data name="MiKo_1102_Description" xml:space="preserve">
    <value>A method that is marked as a unit test should not additionally indicate that it is a unit test by having 'Test' in its name.</value>
  </data>
  <data name="MiKo_1102_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1102_Title" xml:space="preserve">
    <value>Test methods should not contain 'Test'.</value>
  </data>
  <data name="MiKo_1103_Description" xml:space="preserve">
    <value>A method that is marked as unit test initialization method should be named 'PrepareTest'.</value>
  </data>
  <data name="MiKo_1103_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1103_Title" xml:space="preserve">
    <value>Test initialization methods should be named 'PrepareTest'.</value>
  </data>
  <data name="MiKo_1104_Description" xml:space="preserve">
    <value>A method that is marked as unit test cleanup method should be named 'CleanupTest'.</value>
  </data>
  <data name="MiKo_1104_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1104_Title" xml:space="preserve">
    <value>Test cleanup methods should be named 'CleanupTest'.</value>
  </data>
  <data name="MiKo_1105_Description" xml:space="preserve">
    <value>For maintenance reasons, variables should be named about what they represent and not what they technically are.
Hence naming variables e.g. 'Mock' or 'Stub' does not provide any additional value and is just some cluttering noise. In addition, those names put the developer's attention and focus on the wrong thing.</value>
  </data>
  <data name="MiKo_1105_MessageFormat" xml:space="preserve">
    <value>Do not name it 'Mock' or 'Stub'</value>
  </data>
  <data name="MiKo_1105_Title" xml:space="preserve">
    <value>Do not name variables 'Mock' or 'Stub'.</value>
  </data>
  <data name="MiKo_1200_Description" xml:space="preserve">
    <value>To ease maintenance, exceptions in catch blocks should be named consistently.</value>
  </data>
  <data name="MiKo_1200_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}'</value>
  </data>
  <data name="MiKo_1200_Title" xml:space="preserve">
    <value>Name exceptions in catch blocks consistently.</value>
  </data>
  <data name="MiKo_1201_Description" xml:space="preserve">
    <value>To ease maintenance, exceptions as parameters should be named consistently.</value>
  </data>
  <data name="MiKo_1201_MessageFormat" xml:space="preserve">
    <value>Should be named '{1}' or '{2}'</value>
  </data>
  <data name="MiKo_1201_Title" xml:space="preserve">
    <value>Name exceptions as parameters consistently.</value>
  </data>
  <data name="MiKo_1300_Description" xml:space="preserve">
    <value>To ease maintenance, unimportant identifiers in lambdas should be named consistently with '_'.</value>
  </data>
  <data name="MiKo_1300_MessageFormat" xml:space="preserve">
    <value>Use '_' instead</value>
  </data>
  <data name="MiKo_1300_Title" xml:space="preserve">
    <value>Unimportant identifiers in lambda statements should be named '_'.</value>
  </data>
  <data name="MiKo_2000_Description" xml:space="preserve">
    <value>XML documentation should be valid XML so that it can be generated to support the developers.</value>
  </data>
  <data name="MiKo_2000_MessageFormat" xml:space="preserve">
    <value>XML documentation is malformed (contains invalid characters, eg. '&amp;', '&gt;', '&lt;')</value>
  </data>
  <data name="MiKo_2000_Title" xml:space="preserve">
    <value>XML documentation should be valid XML.</value>
  </data>
  <data name="MiKo_2001_Description" xml:space="preserve">
    <value>Events should be documented with 'Occurs ...' to indicate that events actually occur.</value>
  </data>
  <data name="MiKo_2001_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should start with: '{1}'</value>
  </data>
  <data name="MiKo_2001_Title" xml:space="preserve">
    <value>Events should be documented properly.</value>
  </data>
  <data name="MiKo_2002_Description" xml:space="preserve">
    <value>To ease maintenance, EventArgs should be documented with 'Provides data for the &lt;see cref="XYZ" /&gt; event.' to indicate for which event they are valid.</value>
  </data>
  <data name="MiKo_2002_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should follow pattern: '{1} ... {2}'</value>
  </data>
  <data name="MiKo_2002_Title" xml:space="preserve">
    <value>EventArgss should be documented properly.</value>
  </data>
  <data name="MiKo_2003_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of an event handler should have a default starting phrase that describes what event gets handled.</value>
  </data>
  <data name="MiKo_2003_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should start with: '{1}'</value>
  </data>
  <data name="MiKo_2003_Title" xml:space="preserve">
    <value>XML documentation of event handlers should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2004_Description" xml:space="preserve">
    <value>Event method parameters should define what exactly they are.</value>
  </data>
  <data name="MiKo_2004_MessageFormat" xml:space="preserve">
    <value>Documentation should be: '{2}'</value>
  </data>
  <data name="MiKo_2004_Title" xml:space="preserve">
    <value>XML documentation of parameter name does not follow .NET Framework Guidelines for event handlers.</value>
  </data>
  <data name="MiKo_2010_Description" xml:space="preserve">
    <value>To ease their usage when it comes to inheritance, sealed classes should document the fact that they are sealed.</value>
  </data>
  <data name="MiKo_2010_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should end with: '{1}'</value>
  </data>
  <data name="MiKo_2010_Title" xml:space="preserve">
    <value>Sealed classes should document being sealed.</value>
  </data>
  <data name="MiKo_2011_Description" xml:space="preserve">
    <value>Unsealed classes should not report that they are sealed.</value>
  </data>
  <data name="MiKo_2011_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should not contain: '{1}'</value>
  </data>
  <data name="MiKo_2011_Title" xml:space="preserve">
    <value>Unsealed classes should not lie about sealing.</value>
  </data>
  <data name="MiKo_2012_Description" xml:space="preserve">
    <value>To ease development and maintenance, the summary documentation should describe their responsibility.
It should not start with or contain a meaningless phrase like 'Used to'. Instead it should start with something like: 'Allows to ', 'Represents ' or 'Provides '.</value>
  </data>
  <data name="MiKo_2012_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; {1} meaningless phrase: '{2}'</value>
  </data>
  <data name="MiKo_2012_Title" xml:space="preserve">
    <value>XML summary documentation should describe their responsibility.</value>
  </data>
  <data name="MiKo_2013_Description" xml:space="preserve">
    <value>To ease their usage, enums should specify what kind of values they define.</value>
  </data>
  <data name="MiKo_2013_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should start with: '{1}'</value>
  </data>
  <data name="MiKo_2013_Title" xml:space="preserve">
    <value>XML summary for enums should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2014_Description" xml:space="preserve">
    <value>Dispose methods should be documented as by the .NET Framework.</value>
  </data>
  <data name="MiKo_2014_MessageFormat" xml:space="preserve">
    <value>Documentation should be: '{2}'</value>
  </data>
  <data name="MiKo_2014_Title" xml:space="preserve">
    <value>Dispose methods should be documented properly.</value>
  </data>
  <data name="MiKo_2015_Description" xml:space="preserve">
    <value>The term 'Fire' is a negative term. Employees get fired (or guns), but not events. Events get raised. So use 'Raise' instead.</value>
  </data>
  <data name="MiKo_2015_MessageFormat" xml:space="preserve">
    <value>'{0}' should be: '{1}'</value>
  </data>
  <data name="MiKo_2015_Title" xml:space="preserve">
    <value>XML documentation should use 'raise' instead of 'fire'.</value>
  </data>
  <data name="MiKo_2016_Description" xml:space="preserve">
    <value>XML documentation for asynchronous methods should indicate that method is run asynchronously.</value>
  </data>
  <data name="MiKo_2016_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should start with: '{1}'</value>
  </data>
  <data name="MiKo_2016_Title" xml:space="preserve">
    <value>XML documentation for asynchronous methods should start with specific phrase.</value>
  </data>
  <data name="MiKo_2017_Description" xml:space="preserve">
    <value>Dependency properties should be documented properly.</value>
  </data>
  <data name="MiKo_2017_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should be: '{3}'</value>
  </data>
  <data name="MiKo_2017_Title" xml:space="preserve">
    <value>Dependency properties should be documented as by the .NET Framework.</value>
  </data>
  <data name="MiKo_2018_Description" xml:space="preserve">
    <value>The term 'Check' is ambiguous. If validation of parameters is meant, use something like 'Validates' or 'Verifies'. If a check for a specific state is meant, use 'Determines' instead.</value>
  </data>
  <data name="MiKo_2018_MessageFormat" xml:space="preserve">
    <value>Do not use ambiguous term '{1}'</value>
  </data>
  <data name="MiKo_2018_Title" xml:space="preserve">
    <value>XML documentation should not use the ambiguous term 'Check'.</value>
  </data>
  <data name="MiKo_2019_Description" xml:space="preserve">
    <value>XML summary documentation should start with a verb that is in passive form as it shall be a short description of the functionality that the class, property, etc. provides or represents.</value>
  </data>
  <data name="MiKo_2019_MessageFormat" xml:space="preserve">
    <value>Start with verb in passive form</value>
  </data>
  <data name="MiKo_2019_Title" xml:space="preserve">
    <value>XML summary documentation should start with a verb that is in passive form (for example "Provides ").</value>
  </data>
  <data name="MiKo_2020_Description" xml:space="preserve">
    <value>It does not make sense to use XML summaries that only reference something else via &lt;see cref="..." /&gt; as IntelliSense does not show these descriptions. For such scenario &lt;inheritdoc /&gt; should be used.</value>
  </data>
  <data name="MiKo_2020_MessageFormat" xml:space="preserve">
    <value>Use &lt;inheritdoc /&gt; instead</value>
  </data>
  <data name="MiKo_2020_Title" xml:space="preserve">
    <value>Inherited documentation should be used with &lt;inheritdoc /&gt; marker.</value>
  </data>
  <data name="MiKo_2021_Description" xml:space="preserve">
    <value>XML documentation of parameters should describe what they represent.</value>
  </data>
  <data name="MiKo_2021_MessageFormat" xml:space="preserve">
    <value>Documentation should start with any of the following: {2}</value>
  </data>
  <data name="MiKo_2021_Title" xml:space="preserve">
    <value>XML documentation of parameter should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2022_Description" xml:space="preserve">
    <value>XML documentation of [out] parameters should start with the success case.</value>
  </data>
  <data name="MiKo_2022_MessageFormat" xml:space="preserve">
    <value>Documentation should start with: {2}</value>
  </data>
  <data name="MiKo_2022_Title" xml:space="preserve">
    <value>XML documentation of [out] parameters should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2023_Description" xml:space="preserve">
    <value>XML documentation of enum parameters should start with a phrase that specifies what will be done with the enum.</value>
  </data>
  <data name="MiKo_2023_MessageFormat" xml:space="preserve">
    <value>Documentation should start with: {2}</value>
  </data>
  <data name="MiKo_2023_Title" xml:space="preserve">
    <value>XML documentation of enum parameters should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2030_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of a return value should have a default starting phrase that describes the returned value in more detail.</value>
  </data>
  <data name="MiKo_2030_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should start with: '{3}'</value>
  </data>
  <data name="MiKo_2030_Title" xml:space="preserve">
    <value>XML documentation of return value should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2031_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of a Task as return value should have a default (starting) phrase.</value>
  </data>
  <data name="MiKo_2031_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should start with: '{3}'</value>
  </data>
  <data name="MiKo_2031_Title" xml:space="preserve">
    <value>XML documentation of Task return value should have a specific (starting) phrase.</value>
  </data>
  <data name="MiKo_2032_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of a Boolean as return value should have a specific phrase that first describes the 'true' case and then the 'false' case.</value>
  </data>
  <data name="MiKo_2032_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should start with: '{3}'
&lt;{2}&gt; should end with: '{4}'</value>
  </data>
  <data name="MiKo_2032_Title" xml:space="preserve">
    <value>XML documentation of Boolean return value should have a specific phrase.</value>
  </data>
  <data name="MiKo_2033_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of a String as return value should have a specific phrase.</value>
  </data>
  <data name="MiKo_2033_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should start with: '{3}'</value>
  </data>
  <data name="MiKo_2033_Title" xml:space="preserve">
    <value>XML documentation of String return value should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2034_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of an Enum as return value should have a specific phrase.</value>
  </data>
  <data name="MiKo_2034_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should start with: '{3}'</value>
  </data>
  <data name="MiKo_2034_Title" xml:space="preserve">
    <value>XML documentation of Enum return value should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2035_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of a collection as return value should have a specific phrase.</value>
  </data>
  <data name="MiKo_2035_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should start with: '{3}'</value>
  </data>
  <data name="MiKo_2035_Title" xml:space="preserve">
    <value>XML documentation of collection return value should have a default starting phrase.</value>
  </data>
  <data name="MiKo_2036_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of Boolean or Enum properties shall end with a phrase that describes the value that is returned per default.</value>
  </data>
  <data name="MiKo_2036_MessageFormat" xml:space="preserve">
    <value>&lt;{2}&gt; should end with: '{3}'</value>
  </data>
  <data name="MiKo_2036_Title" xml:space="preserve">
    <value>XML documentation of Boolean or Enum properties shall describe the default value.</value>
  </data>
  <data name="MiKo_2040_Description" xml:space="preserve">
    <value>To support other languages than C#, use '&lt;see langword="..."/&gt;' instead of '&lt;c&gt;...&lt;/c&gt;'.</value>
  </data>
  <data name="MiKo_2040_MessageFormat" xml:space="preserve">
    <value>Use '{2}' instead of '{1}'</value>
  </data>
  <data name="MiKo_2040_Title" xml:space="preserve">
    <value>&lt;see langword="..."/&gt; should be used instead of &lt;c&gt;...&lt;/c&gt;.</value>
  </data>
  <data name="MiKo_2041_Description" xml:space="preserve">
    <value>The &lt;summary&gt; XML documentation should only contain a short summary description. Other documentation should be provided by the other tags in parallel to the &lt;summary&gt;.</value>
  </data>
  <data name="MiKo_2041_HelpLinkUri" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments</value>
  </data>
  <data name="MiKo_2041_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should not contain: '{1}'</value>
  </data>
  <data name="MiKo_2041_Title" xml:space="preserve">
    <value>&lt;summary&gt; documentation should not contain other documentation tags.</value>
  </data>
  <data name="MiKo_2050_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of exceptions should follow the .NET Framework documentation.</value>
  </data>
  <data name="MiKo_2050_MessageFormat" xml:space="preserve">
    <value>&lt;{1}&gt; should start with: '{2}'</value>
  </data>
  <data name="MiKo_2050_Title" xml:space="preserve">
    <value>Exceptions should be documented following the .NET Framework.</value>
  </data>
  <data name="MiKo_2060_Description" xml:space="preserve">
    <value>To ease maintenance, the XML documentation of factories should be uniform.</value>
  </data>
  <data name="MiKo_2060_MessageFormat" xml:space="preserve">
    <value>&lt;summary&gt; should start with: '{1}'</value>
  </data>
  <data name="MiKo_2060_Title" xml:space="preserve">
    <value>Factories should be documented in a uniform way.</value>
  </data>
  <data name="MiKo_3001_Description" xml:space="preserve">
    <value>To follow the SRP, methods should have as few parameters as possible.</value>
  </data>
  <data name="MiKo_3001_MessageFormat" xml:space="preserve">
    <value>Too many parameters: {1,4} (max. {2})</value>
  </data>
  <data name="MiKo_3001_Title" xml:space="preserve">
    <value>Methods should not have too many parameters.</value>
  </data>
  <data name="MiKo_3002_Description" xml:space="preserve">
    <value>If a class has too many dependencies, that class is doing too much and does not follow the SRP.</value>
  </data>
  <data name="MiKo_3002_MessageFormat" xml:space="preserve">
    <value>Too many MEF dependencies: {1,4} (max. {2})</value>
  </data>
  <data name="MiKo_3002_Title" xml:space="preserve">
    <value>Classes should not have too many dependencies.</value>
  </data>
  <data name="MiKo_3003_Description" xml:space="preserve">
    <value>To ease usage, events should follow the .NET Framework Guidelines for Event Design.</value>
  </data>
  <data name="MiKo_3003_HelpLinkUri" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event</value>
  </data>
  <data name="MiKo_3003_MessageFormat" xml:space="preserve">
    <value>'{0}' should use 'EventHandler' or 'EventHandler&lt;T&gt;'</value>
  </data>
  <data name="MiKo_3003_Title" xml:space="preserve">
    <value>Events should follow .NET Framework Guidelines for events.</value>
  </data>
  <data name="MiKo_3004_Description" xml:space="preserve">
    <value>For performance reasons, it makes no sense to use 'object.Equals()' on value types. Value types get boxed and unboxed when being casted to objects. That puts unnecessary pressure on the garbage collector as temporary objects are created and immediately get garbage collected.

Instead the equality operator should be used to compare value types.</value>
  </data>
  <data name="MiKo_3004_MessageFormat" xml:space="preserve">
    <value>Use '==' operator instead of 'object.Equals'</value>
  </data>
  <data name="MiKo_3004_Title" xml:space="preserve">
    <value>Do not use object.Equals() on value types.</value>
  </data>
  <data name="MiKo_3005_Description" xml:space="preserve">
    <value>To ease maintenance, methods that are named 'Try' should follow the Try-Pattern.

That is they should return a Boolean and have the last parameter as out-parameter for the result. In the success case the method should return true and provide valid out data; in all other cases the method should return false.</value>
  </data>
  <data name="MiKo_3005_MessageFormat" xml:space="preserve">
    <value>Follow the Try-Pattern</value>
  </data>
  <data name="MiKo_3005_Title" xml:space="preserve">
    <value>Methods named 'Try' should follow the Try-Pattern.</value>
  </data>
  <data name="MiKo_3101_Description" xml:space="preserve">
    <value>A class that is marked as a unit test class should contain unit tests.</value>
  </data>
  <data name="MiKo_3101_MessageFormat" xml:space="preserve">
    <value>'{0}' should contain tests</value>
  </data>
  <data name="MiKo_3101_Title" xml:space="preserve">
    <value>Test classes should contain tests.</value>
  </data>
</root>