//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiKoSolutions.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MiKoSolutions.Analyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be short to ease reading and maintenance (SRP, SLoA)..
        /// </summary>
        public static string MiKo_0001_Description {
            get {
                return ResourceManager.GetString("MiKo_0001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many LoC: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_0001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is too long..
        /// </summary>
        public static string MiKo_0001_Title {
            get {
                return ResourceManager.GetString("MiKo_0001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should be simple to ease maintenance (KISS).
        ///Following code constructs increase the Cyclomatic Complexity (CC) by +1:
        ///    if | while | for | foreach | case | continue | goto | &amp;&amp; | || | catch | catch when | ternary operator ?: | ?? | ?..
        /// </summary>
        public static string MiKo_0002_Description {
            get {
                return ResourceManager.GetString("MiKo_0002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too complex: {1,4} CC (max. {2}).
        /// </summary>
        public static string MiKo_0002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method is too complex..
        /// </summary>
        public static string MiKo_0002_Title {
            get {
                return ResourceManager.GetString("MiKo_0002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should be limited in their size to ease reading and maintenance (SRP)..
        /// </summary>
        public static string MiKo_0003_Description {
            get {
                return ResourceManager.GetString("MiKo_0003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many LoC: {1,4} LoC (max. {2}).
        /// </summary>
        public static string MiKo_0003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type is too long..
        /// </summary>
        public static string MiKo_0003_Title {
            get {
                return ResourceManager.GetString("MiKo_0003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the SRP, methods should have as few parameters as possible..
        /// </summary>
        public static string MiKo_0004_Description {
            get {
                return ResourceManager.GetString("MiKo_0004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many parameters: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_0004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_0004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not have too many parameters..
        /// </summary>
        public static string MiKo_0004_Title {
            get {
                return ResourceManager.GetString("MiKo_0004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, parameters that inherit from &apos;System.EventArgs&apos; should be named &apos;e&apos; ..
        /// </summary>
        public static string MiKo_1001_Description {
            get {
                return ResourceManager.GetString("MiKo_1001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        public static string MiKo_1001_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1001_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventArgs&apos; parameters on methods should be named properly..
        /// </summary>
        public static string MiKo_1001_Title {
            get {
                return ResourceManager.GetString("MiKo_1001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To follow the .NET Framework Guidelines, parameters of event handlers should be named &apos;sender&apos; and &apos;e&apos;..
        /// </summary>
        public static string MiKo_1002_Description {
            get {
                return ResourceManager.GetString("MiKo_1002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        public static string MiKo_1002_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1002_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names do not follow .NET Framework Guidelines for event handlers..
        /// </summary>
        public static string MiKo_1002_Title {
            get {
                return ResourceManager.GetString("MiKo_1002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event handlers should start with &apos;On&apos; to indicate that they handle events..
        /// </summary>
        public static string MiKo_1003_Description {
            get {
                return ResourceManager.GetString("MiKo_1003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/csharp/event-pattern.
        /// </summary>
        public static string MiKo_1003_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_1003_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of event handler does not follow the .NET Framework Best Practices..
        /// </summary>
        public static string MiKo_1003_Title {
            get {
                return ResourceManager.GetString("MiKo_1003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Event&apos; as suffix in event names are noise and should be avoided..
        /// </summary>
        public static string MiKo_1004_Description {
            get {
                return ResourceManager.GetString("MiKo_1004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should not contain term &apos;Event&apos; in their names..
        /// </summary>
        public static string MiKo_1004_Title {
            get {
                return ResourceManager.GetString("MiKo_1004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, variables that are of type &apos;System.EventArgs&apos; (or any inheritors) should be named &apos;e&apos;..
        /// </summary>
        public static string MiKo_1005_Description {
            get {
                return ResourceManager.GetString("MiKo_1005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;System.EventArgs&apos; variables should be named properly..
        /// </summary>
        public static string MiKo_1005_Title {
            get {
                return ResourceManager.GetString("MiKo_1005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;CanExecute&apos; or &apos;Execute&apos; in their names..
        /// </summary>
        public static string MiKo_1010_Description {
            get {
                return ResourceManager.GetString("MiKo_1010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;Do&apos; in their names..
        /// </summary>
        public static string MiKo_1010_Title {
            get {
                return ResourceManager.GetString("MiKo_1010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The purpose of methods is to execute code, so it&apos;s useless and repetitive to have &apos;Do&apos; in their names..
        /// </summary>
        public static string MiKo_1011_Description {
            get {
                return ResourceManager.GetString("MiKo_1011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not contain &apos;CanExecute&apos; or &apos;Execute&apos; in their names..
        /// </summary>
        public static string MiKo_1011_Title {
            get {
                return ResourceManager.GetString("MiKo_1011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Fire&apos; is a negative term. Employees get fired (or guns), but not events. Events get raised. So use &apos;Raise&apos; instead..
        /// </summary>
        public static string MiKo_1012_Description {
            get {
                return ResourceManager.GetString("MiKo_1012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Fire&apos;..
        /// </summary>
        public static string MiKo_1012_Title {
            get {
                return ResourceManager.GetString("MiKo_1012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Check&apos; is ambiguous. If validation of parameters is meant, use something like &apos;Validate&apos; or &apos;Verify&apos;. If a check for a specific state is meant, use &apos;Is&apos;, &apos;Can&apos; or &apos;Has&apos; instead..
        /// </summary>
        public static string MiKo_1013_Description {
            get {
                return ResourceManager.GetString("MiKo_1013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ambiguous term &apos;Check&apos; in &apos;{0}&apos;.
        /// </summary>
        public static string MiKo_1013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Check&apos;..
        /// </summary>
        public static string MiKo_1013_Title {
            get {
                return ResourceManager.GetString("MiKo_1013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Init&apos; is a lazy abbreviation and should not be used. &apos;Initialize&apos; should be used instead..
        /// </summary>
        public static string MiKo_1014_Description {
            get {
                return ResourceManager.GetString("MiKo_1014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods should not be named &apos;Init&apos;..
        /// </summary>
        public static string MiKo_1014_Title {
            get {
                return ResourceManager.GetString("MiKo_1014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method belongs to a factory and therefore its name should be started with &apos;Create&apos;..
        /// </summary>
        public static string MiKo_1015_Description {
            get {
                return ResourceManager.GetString("MiKo_1015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name should start with &apos;Create&apos;.
        /// </summary>
        public static string MiKo_1015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factory methods should be named &apos;Create&apos;..
        /// </summary>
        public static string MiKo_1015_Title {
            get {
                return ResourceManager.GetString("MiKo_1015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1020_Description {
            get {
                return ResourceManager.GetString("MiKo_1020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type names should be limited in length..
        /// </summary>
        public static string MiKo_1020_Title {
            get {
                return ResourceManager.GetString("MiKo_1020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1021_Description {
            get {
                return ResourceManager.GetString("MiKo_1021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method names should be limited in length..
        /// </summary>
        public static string MiKo_1021_Title {
            get {
                return ResourceManager.GetString("MiKo_1021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1022_Description {
            get {
                return ResourceManager.GetString("MiKo_1022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter names should be limited in length..
        /// </summary>
        public static string MiKo_1022_Title {
            get {
                return ResourceManager.GetString("MiKo_1022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1023_Description {
            get {
                return ResourceManager.GetString("MiKo_1023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field names should be limited in length..
        /// </summary>
        public static string MiKo_1023_Title {
            get {
                return ResourceManager.GetString("MiKo_1023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1024_Description {
            get {
                return ResourceManager.GetString("MiKo_1024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property names should be limited in length..
        /// </summary>
        public static string MiKo_1024_Title {
            get {
                return ResourceManager.GetString("MiKo_1024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1025_Description {
            get {
                return ResourceManager.GetString("MiKo_1025_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1025_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1025_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event names should be limited in length..
        /// </summary>
        public static string MiKo_1025_Title {
            get {
                return ResourceManager.GetString("MiKo_1025_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names that have a lot of characters are hard to read when being used. This makes writing code and doing code reviews much harder..
        /// </summary>
        public static string MiKo_1026_Description {
            get {
                return ResourceManager.GetString("MiKo_1026_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable name exceeds limit of {2} chars by {1}.
        /// </summary>
        public static string MiKo_1026_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1026_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable names should be limited in length..
        /// </summary>
        public static string MiKo_1026_Title {
            get {
                return ResourceManager.GetString("MiKo_1026_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is a base type by putting &apos;Base&apos; in its name does not make sense. Every interface or class that is not sealed can act as a base class..
        /// </summary>
        public static string MiKo_1030_Description {
            get {
                return ResourceManager.GetString("MiKo_1030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should not have a &apos;Base&apos; marker to indicate that they are base types..
        /// </summary>
        public static string MiKo_1030_Title {
            get {
                return ResourceManager.GetString("MiKo_1030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;User&apos; instead of &apos;UserModel&apos;).
        /// </summary>
        public static string MiKo_1031_Description {
            get {
                return ResourceManager.GetString("MiKo_1031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entity types should not use a &apos;Model&apos; suffix..
        /// </summary>
        public static string MiKo_1031_Title {
            get {
                return ResourceManager.GetString("MiKo_1031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a method deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        public static string MiKo_1032_Description {
            get {
                return ResourceManager.GetString("MiKo_1032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods dealing with entities should not use a &apos;Model&apos; marker..
        /// </summary>
        public static string MiKo_1032_Title {
            get {
                return ResourceManager.GetString("MiKo_1032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a parameter is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;user&apos; instead of &apos;userModel&apos;).
        /// </summary>
        public static string MiKo_1033_Description {
            get {
                return ResourceManager.GetString("MiKo_1033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters representing entities should not use a &apos;Model&apos; suffix..
        /// </summary>
        public static string MiKo_1033_Title {
            get {
                return ResourceManager.GetString("MiKo_1033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a field is an entity by using &apos;Model&apos; as its suffix does not make sense. Entities should not be suffixed at all. (eg. &apos;user&apos; instead of &apos;userModel&apos;).
        /// </summary>
        public static string MiKo_1034_Description {
            get {
                return ResourceManager.GetString("MiKo_1034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields representing entities should not use a &apos;Model&apos; suffix..
        /// </summary>
        public static string MiKo_1034_Title {
            get {
                return ResourceManager.GetString("MiKo_1034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a property deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        public static string MiKo_1035_Description {
            get {
                return ResourceManager.GetString("MiKo_1035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties dealing with entities should not use a &apos;Model&apos; marker..
        /// </summary>
        public static string MiKo_1035_Title {
            get {
                return ResourceManager.GetString("MiKo_1035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that an event deals with an entity by using &apos;Model&apos; in its name does not make sense..
        /// </summary>
        public static string MiKo_1036_Description {
            get {
                return ResourceManager.GetString("MiKo_1036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events dealing with entities should not use a &apos;Model&apos; marker..
        /// </summary>
        public static string MiKo_1036_Title {
            get {
                return ResourceManager.GetString("MiKo_1036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicating that a type is an Enum by using &apos;Enum&apos; as its suffix does not make sense..
        /// </summary>
        public static string MiKo_1037_Description {
            get {
                return ResourceManager.GetString("MiKo_1037_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1037_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1037_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types should not be suffixed with &apos;Enum&apos;..
        /// </summary>
        public static string MiKo_1037_Title {
            get {
                return ResourceManager.GetString("MiKo_1037_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the names of classes that contain extension methods should end with the the same suffix..
        /// </summary>
        public static string MiKo_1038_Description {
            get {
                return ResourceManager.GetString("MiKo_1038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Should end with &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes that contain extension methods should end with same suffix..
        /// </summary>
        public static string MiKo_1038_Title {
            get {
                return ResourceManager.GetString("MiKo_1038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the &apos;this&apos; parameter of extension methods should have a default name..
        /// </summary>
        public static string MiKo_1039_Description {
            get {
                return ResourceManager.GetString("MiKo_1039_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; or &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_1039_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1039_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension methods &apos;this&apos; parameter should have default name..
        /// </summary>
        public static string MiKo_1039_Title {
            get {
                return ResourceManager.GetString("MiKo_1039_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixes on parameter names (such as &apos;List&apos;) are noise and should be avoided..
        /// </summary>
        public static string MiKo_1040_Description {
            get {
                return ResourceManager.GetString("MiKo_1040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters should not be suffixed with implementation details..
        /// </summary>
        public static string MiKo_1040_Title {
            get {
                return ResourceManager.GetString("MiKo_1040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suffixes on field names (such as &apos;List&apos;) are noise and should be avoided..
        /// </summary>
        public static string MiKo_1041_Description {
            get {
                return ResourceManager.GetString("MiKo_1041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields should not be suffixed with implementation details..
        /// </summary>
        public static string MiKo_1041_Title {
            get {
                return ResourceManager.GetString("MiKo_1041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, and being consistent with the .NET Framework classes, &apos;CancellationToken&apos; parameters should have a very specific name..
        /// </summary>
        public static string MiKo_1042_Description {
            get {
                return ResourceManager.GetString("MiKo_1042_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1042_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1042_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; parameters should have specific name..
        /// </summary>
        public static string MiKo_1042_Title {
            get {
                return ResourceManager.GetString("MiKo_1042_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, &apos;CancellationToken&apos; variables should have a very specific name..
        /// </summary>
        public static string MiKo_1043_Description {
            get {
                return ResourceManager.GetString("MiKo_1043_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1043_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1043_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; variables should have specific name..
        /// </summary>
        public static string MiKo_1043_Title {
            get {
                return ResourceManager.GetString("MiKo_1043_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should indicate that by the suffix &apos;Tests&apos; as it normally contains multiple tests..
        /// </summary>
        public static string MiKo_1101_Description {
            get {
                return ResourceManager.GetString("MiKo_1101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should end with &apos;Tests&apos;..
        /// </summary>
        public static string MiKo_1101_Title {
            get {
                return ResourceManager.GetString("MiKo_1101_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as a unit test should not additionally indicate that it is a unit test by having &apos;Test&apos; in its name..
        /// </summary>
        public static string MiKo_1102_Description {
            get {
                return ResourceManager.GetString("MiKo_1102_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1102_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1102_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test methods should not contain &apos;Test&apos;..
        /// </summary>
        public static string MiKo_1102_Title {
            get {
                return ResourceManager.GetString("MiKo_1102_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as unit test initialization method should be named &apos;PrepareTest&apos;..
        /// </summary>
        public static string MiKo_1103_Description {
            get {
                return ResourceManager.GetString("MiKo_1103_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1103_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1103_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test initialization methods should be named &apos;PrepareTest&apos;..
        /// </summary>
        public static string MiKo_1103_Title {
            get {
                return ResourceManager.GetString("MiKo_1103_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method that is marked as unit test cleanup method should be named &apos;CleanupTest&apos;..
        /// </summary>
        public static string MiKo_1104_Description {
            get {
                return ResourceManager.GetString("MiKo_1104_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1104_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1104_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test cleanup methods should be named &apos;CleanupTest&apos;..
        /// </summary>
        public static string MiKo_1104_Title {
            get {
                return ResourceManager.GetString("MiKo_1104_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For maintenance reasons, variables should be named about what they represent and not what they technically are.
        ///Hence naming variables e.g. &apos;Mock&apos; or &apos;Stub&apos; does not provide any additional value and is just some cluttering noise. In addition, those names put the developer&apos;s attention and focus on the wrong thing..
        /// </summary>
        public static string MiKo_1105_Description {
            get {
                return ResourceManager.GetString("MiKo_1105_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name it &apos;Mock&apos; or &apos;Stub&apos;.
        /// </summary>
        public static string MiKo_1105_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1105_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not name variables &apos;Mock&apos; or &apos;Stub&apos;..
        /// </summary>
        public static string MiKo_1105_Title {
            get {
                return ResourceManager.GetString("MiKo_1105_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, exceptions in catch blocks should be named consistently..
        /// </summary>
        public static string MiKo_1200_Description {
            get {
                return ResourceManager.GetString("MiKo_1200_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_1200_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1200_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name exceptions in catch blocks consistently..
        /// </summary>
        public static string MiKo_1200_Title {
            get {
                return ResourceManager.GetString("MiKo_1200_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, exceptions as parameters should be named consistently..
        /// </summary>
        public static string MiKo_1201_Description {
            get {
                return ResourceManager.GetString("MiKo_1201_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name it &apos;{1}&apos; or &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_1201_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1201_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name exceptions as parameters consistently..
        /// </summary>
        public static string MiKo_1201_Title {
            get {
                return ResourceManager.GetString("MiKo_1201_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, unimportant identifiers in lambdas should be named consistently with &apos;_&apos;..
        /// </summary>
        public static string MiKo_1300_Description {
            get {
                return ResourceManager.GetString("MiKo_1300_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;_&apos; instead.
        /// </summary>
        public static string MiKo_1300_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_1300_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unimportant identifiers in lambda statements should be named &apos;_&apos;..
        /// </summary>
        public static string MiKo_1300_Title {
            get {
                return ResourceManager.GetString("MiKo_1300_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation should be valid XML so that it can be generated to support the developers..
        /// </summary>
        public static string MiKo_2000_Description {
            get {
                return ResourceManager.GetString("MiKo_2000_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation is malformed (contains invalid characters, eg. &apos;&amp;&apos;, &apos;&gt;&apos;, &apos;&lt;&apos;).
        /// </summary>
        public static string MiKo_2000_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2000_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation should be valid XML..
        /// </summary>
        public static string MiKo_2000_Title {
            get {
                return ResourceManager.GetString("MiKo_2000_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be documented with &apos;Occurs ...&apos; to indicate that events actually occur..
        /// </summary>
        public static string MiKo_2001_Description {
            get {
                return ResourceManager.GetString("MiKo_2001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should start with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should be documented properly..
        /// </summary>
        public static string MiKo_2001_Title {
            get {
                return ResourceManager.GetString("MiKo_2001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, classes that inherit from &apos;System.EventArgs&apos; should be documented with &apos;Provides data for the &lt;see cref=&quot;XYZ&quot; /&gt; event.&apos; to indicate for which event they are valid..
        /// </summary>
        public static string MiKo_2002_Description {
            get {
                return ResourceManager.GetString("MiKo_2002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should follow pattern: &apos;{1} ... {2}&apos;.
        /// </summary>
        public static string MiKo_2002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EventArgs should be documented properly..
        /// </summary>
        public static string MiKo_2002_Title {
            get {
                return ResourceManager.GetString("MiKo_2002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of an event handler should have a default starting phrase that describes what event gets handled..
        /// </summary>
        public static string MiKo_2003_Description {
            get {
                return ResourceManager.GetString("MiKo_2003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should start with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of event handlers should have a default starting phrase..
        /// </summary>
        public static string MiKo_2003_Title {
            get {
                return ResourceManager.GetString("MiKo_2003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event method parameters should define what exactly they are..
        /// </summary>
        public static string MiKo_2004_Description {
            get {
                return ResourceManager.GetString("MiKo_2004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of parameter name does not follow .NET Framework Guidelines for event handlers..
        /// </summary>
        public static string MiKo_2004_Title {
            get {
                return ResourceManager.GetString("MiKo_2004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their usage when it comes to inheritance, sealed classes should document the fact that they are sealed..
        /// </summary>
        public static string MiKo_2010_Description {
            get {
                return ResourceManager.GetString("MiKo_2010_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should end with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2010_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2010_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sealed classes should document being sealed..
        /// </summary>
        public static string MiKo_2010_Title {
            get {
                return ResourceManager.GetString("MiKo_2010_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsealed classes should not report that they are sealed..
        /// </summary>
        public static string MiKo_2011_Description {
            get {
                return ResourceManager.GetString("MiKo_2011_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2011_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2011_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsealed classes should not lie about sealing..
        /// </summary>
        public static string MiKo_2011_Title {
            get {
                return ResourceManager.GetString("MiKo_2011_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease development and maintenance, the summary documentation should describe their responsibility.
        ///It should not start with or contain a meaningless phrase like &apos;Used to&apos;. Instead it should start with something like: &apos;Allows to &apos;, &apos;Represents &apos; or &apos;Provides &apos;..
        /// </summary>
        public static string MiKo_2012_Description {
            get {
                return ResourceManager.GetString("MiKo_2012_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; {1} meaningless phrase: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2012_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2012_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML summary documentation should describe their responsibility..
        /// </summary>
        public static string MiKo_2012_Title {
            get {
                return ResourceManager.GetString("MiKo_2012_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease their usage, enums should specify what kind of values they define..
        /// </summary>
        public static string MiKo_2013_Description {
            get {
                return ResourceManager.GetString("MiKo_2013_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should start with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2013_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2013_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML summary for enums should have a default starting phrase..
        /// </summary>
        public static string MiKo_2013_Title {
            get {
                return ResourceManager.GetString("MiKo_2013_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be documented as by the .NET Framework..
        /// </summary>
        public static string MiKo_2014_Description {
            get {
                return ResourceManager.GetString("MiKo_2014_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should be: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2014_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2014_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dispose methods should be documented properly..
        /// </summary>
        public static string MiKo_2014_Title {
            get {
                return ResourceManager.GetString("MiKo_2014_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Fire&apos; is a negative term. Employees get fired (or guns), but not events. Events get raised. So use &apos;Raise&apos; instead..
        /// </summary>
        public static string MiKo_2015_Description {
            get {
                return ResourceManager.GetString("MiKo_2015_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should be: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2015_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2015_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation should use &apos;raise&apos; instead of &apos;fire&apos;..
        /// </summary>
        public static string MiKo_2015_Title {
            get {
                return ResourceManager.GetString("MiKo_2015_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation for asynchronous methods should indicate that method is run asynchronously..
        /// </summary>
        public static string MiKo_2016_Description {
            get {
                return ResourceManager.GetString("MiKo_2016_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should start with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2016_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2016_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation for asynchronous methods should start with specific phrase..
        /// </summary>
        public static string MiKo_2016_Title {
            get {
                return ResourceManager.GetString("MiKo_2016_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be documented properly..
        /// </summary>
        public static string MiKo_2017_Description {
            get {
                return ResourceManager.GetString("MiKo_2017_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should be: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2017_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2017_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency properties should be documented as by the .NET Framework..
        /// </summary>
        public static string MiKo_2017_Title {
            get {
                return ResourceManager.GetString("MiKo_2017_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The term &apos;Check&apos; is ambiguous. If validation of parameters is meant, use something like &apos;Validates&apos; or &apos;Verifies&apos;. If a check for a specific state is meant, use &apos;Determines&apos; instead..
        /// </summary>
        public static string MiKo_2018_Description {
            get {
                return ResourceManager.GetString("MiKo_2018_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ambiguous term &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2018_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2018_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation should not use the ambiguous term &apos;Check&apos;..
        /// </summary>
        public static string MiKo_2018_Title {
            get {
                return ResourceManager.GetString("MiKo_2018_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML summary documentation should start with a verb that is in passive form as it shall be a short description of the functionality that the class, property, etc. provides or represents..
        /// </summary>
        public static string MiKo_2019_Description {
            get {
                return ResourceManager.GetString("MiKo_2019_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start with verb in passive form.
        /// </summary>
        public static string MiKo_2019_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2019_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML summary documentation should start with a verb that is in passive form (for example &quot;Provides &quot;)..
        /// </summary>
        public static string MiKo_2019_Title {
            get {
                return ResourceManager.GetString("MiKo_2019_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It does not make sense to use XML summaries that only reference something else via &lt;see cref=&quot;...&quot; /&gt; as IntelliSense does not show these descriptions. For such scenario &lt;inheritdoc /&gt; should be used..
        /// </summary>
        public static string MiKo_2020_Description {
            get {
                return ResourceManager.GetString("MiKo_2020_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &lt;inheritdoc /&gt; instead.
        /// </summary>
        public static string MiKo_2020_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2020_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inherited documentation should be used with &lt;inheritdoc /&gt; marker..
        /// </summary>
        public static string MiKo_2020_Title {
            get {
                return ResourceManager.GetString("MiKo_2020_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of parameters should describe what they represent..
        /// </summary>
        public static string MiKo_2021_Description {
            get {
                return ResourceManager.GetString("MiKo_2021_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should start with any of the following: {2}.
        /// </summary>
        public static string MiKo_2021_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2021_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of parameter should have a default starting phrase..
        /// </summary>
        public static string MiKo_2021_Title {
            get {
                return ResourceManager.GetString("MiKo_2021_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of [out] parameters should start with the success case..
        /// </summary>
        public static string MiKo_2022_Description {
            get {
                return ResourceManager.GetString("MiKo_2022_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should start with: {2}.
        /// </summary>
        public static string MiKo_2022_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2022_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of [out] parameters should have a default starting phrase..
        /// </summary>
        public static string MiKo_2022_Title {
            get {
                return ResourceManager.GetString("MiKo_2022_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of enum parameters should start with a phrase that specifies what will be done with the enum..
        /// </summary>
        public static string MiKo_2023_Description {
            get {
                return ResourceManager.GetString("MiKo_2023_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should start with: {2}.
        /// </summary>
        public static string MiKo_2023_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2023_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of enum parameters should have a default starting phrase..
        /// </summary>
        public static string MiKo_2023_Title {
            get {
                return ResourceManager.GetString("MiKo_2023_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of &apos;CancellationToken&apos; parameters should start with a phrase that describes how it is used..
        /// </summary>
        public static string MiKo_2024_Description {
            get {
                return ResourceManager.GetString("MiKo_2024_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Documentation should start with: {2}.
        /// </summary>
        public static string MiKo_2024_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2024_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of &apos;CancellationToken&apos; parameters should have a default starting phrase..
        /// </summary>
        public static string MiKo_2024_Title {
            get {
                return ResourceManager.GetString("MiKo_2024_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of a return value should have a default starting phrase that describes the returned value in more detail..
        /// </summary>
        public static string MiKo_2030_Description {
            get {
                return ResourceManager.GetString("MiKo_2030_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should start with: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2030_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2030_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2030_Title {
            get {
                return ResourceManager.GetString("MiKo_2030_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of a Task as return value should have a default (starting) phrase..
        /// </summary>
        public static string MiKo_2031_Description {
            get {
                return ResourceManager.GetString("MiKo_2031_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should start with: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2031_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2031_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of Task return value should have a specific (starting) phrase..
        /// </summary>
        public static string MiKo_2031_Title {
            get {
                return ResourceManager.GetString("MiKo_2031_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of a Boolean as return value should have a specific phrase that first describes the &apos;true&apos; case and then the &apos;false&apos; case..
        /// </summary>
        public static string MiKo_2032_Description {
            get {
                return ResourceManager.GetString("MiKo_2032_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should start with: &apos;{3}&apos;
        ///&lt;{2}&gt; should end with: &apos;{4}&apos;.
        /// </summary>
        public static string MiKo_2032_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2032_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of Boolean return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2032_Title {
            get {
                return ResourceManager.GetString("MiKo_2032_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of a String as return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2033_Description {
            get {
                return ResourceManager.GetString("MiKo_2033_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should start with: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2033_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2033_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of String return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2033_Title {
            get {
                return ResourceManager.GetString("MiKo_2033_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of an Enum as return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2034_Description {
            get {
                return ResourceManager.GetString("MiKo_2034_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should start with: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2034_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2034_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of Enum return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2034_Title {
            get {
                return ResourceManager.GetString("MiKo_2034_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of a collection as return value should have a specific phrase..
        /// </summary>
        public static string MiKo_2035_Description {
            get {
                return ResourceManager.GetString("MiKo_2035_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should start with: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2035_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2035_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of collection return value should have a default starting phrase..
        /// </summary>
        public static string MiKo_2035_Title {
            get {
                return ResourceManager.GetString("MiKo_2035_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of Boolean or Enum properties shall end with a phrase that describes the value that is returned per default..
        /// </summary>
        public static string MiKo_2036_Description {
            get {
                return ResourceManager.GetString("MiKo_2036_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{2}&gt; should end with: &apos;{3}&apos;.
        /// </summary>
        public static string MiKo_2036_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2036_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML documentation of Boolean or Enum properties shall describe the default value..
        /// </summary>
        public static string MiKo_2036_Title {
            get {
                return ResourceManager.GetString("MiKo_2036_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of classes that contain extension methods should start with a specific phrase that describes what the class provides..
        /// </summary>
        public static string MiKo_2038_Description {
            get {
                return ResourceManager.GetString("MiKo_2038_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should start with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2038_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2038_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XMLdocumentation of classes that contain extension methods should have a default starting phrase..
        /// </summary>
        public static string MiKo_2038_Title {
            get {
                return ResourceManager.GetString("MiKo_2038_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To support other languages than C#, use &apos;&lt;see langword=&quot;...&quot;/&gt;&apos; instead of &apos;&lt;c&gt;...&lt;/c&gt;&apos;..
        /// </summary>
        public static string MiKo_2040_Description {
            get {
                return ResourceManager.GetString("MiKo_2040_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;{2}&apos; instead of &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2040_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2040_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;see langword=&quot;...&quot;/&gt; should be used instead of &lt;c&gt;...&lt;/c&gt;..
        /// </summary>
        public static string MiKo_2040_Title {
            get {
                return ResourceManager.GetString("MiKo_2040_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &lt;summary&gt; XML documentation should only contain a short summary description. Other documentation should be provided by the other tags in parallel to the &lt;summary&gt;..
        /// </summary>
        public static string MiKo_2041_Description {
            get {
                return ResourceManager.GetString("MiKo_2041_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/recommended-tags-for-documentation-comments.
        /// </summary>
        public static string MiKo_2041_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_2041_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should not contain: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2041_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2041_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; documentation should not contain other documentation tags..
        /// </summary>
        public static string MiKo_2041_Title {
            get {
                return ResourceManager.GetString("MiKo_2041_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of exceptions should follow the .NET Framework documentation..
        /// </summary>
        public static string MiKo_2050_Description {
            get {
                return ResourceManager.GetString("MiKo_2050_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;{1}&gt; should start with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2050_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2050_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exceptions should be documented following the .NET Framework..
        /// </summary>
        public static string MiKo_2050_Title {
            get {
                return ResourceManager.GetString("MiKo_2050_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of an ArgumentNullException being thrown should be a specific phrase..
        /// </summary>
        public static string MiKo_2051_Description {
            get {
                return ResourceManager.GetString("MiKo_2051_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} content should be something like:
        ///&apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2051_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2051_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentNullException should be documented using a default phrase..
        /// </summary>
        public static string MiKo_2051_Title {
            get {
                return ResourceManager.GetString("MiKo_2051_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of an ArgumentNullException should not refer to a value type parameter as that can never be null..
        /// </summary>
        public static string MiKo_2052_Description {
            get {
                return ResourceManager.GetString("MiKo_2052_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove &apos;{2}&apos; as &apos;{1}&apos; is a value type parameter.
        /// </summary>
        public static string MiKo_2052_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2052_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentNullException should be documented only for reference type parameters..
        /// </summary>
        public static string MiKo_2052_Title {
            get {
                return ResourceManager.GetString("MiKo_2052_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of an ArgumentException being thrown should have a specific starting phrase..
        /// </summary>
        public static string MiKo_2053_Description {
            get {
                return ResourceManager.GetString("MiKo_2053_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} content should be something like:
        ///&apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2053_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2053_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentException should be documented using a default starting phrase..
        /// </summary>
        public static string MiKo_2053_Title {
            get {
                return ResourceManager.GetString("MiKo_2053_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of an ArgumentOutOfRangeException being thrown should have a specific starting phrase..
        /// </summary>
        public static string MiKo_2054_Description {
            get {
                return ResourceManager.GetString("MiKo_2054_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} content should be something like:
        ///&apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2054_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2054_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ArgumentOutOfRangeException should be documented using a default starting phrase..
        /// </summary>
        public static string MiKo_2054_Title {
            get {
                return ResourceManager.GetString("MiKo_2054_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of an ObjectDisposedException being thrown should have a specific ending phrase..
        /// </summary>
        public static string MiKo_2055_Description {
            get {
                return ResourceManager.GetString("MiKo_2055_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {1} should end with: &apos;{2}&apos;.
        /// </summary>
        public static string MiKo_2055_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2055_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Throwing of ObjectDisposedException should be documented using a default ending phrase..
        /// </summary>
        public static string MiKo_2055_Title {
            get {
                return ResourceManager.GetString("MiKo_2055_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, the XML documentation of factories should be uniform..
        /// </summary>
        public static string MiKo_2060_Description {
            get {
                return ResourceManager.GetString("MiKo_2060_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;summary&gt; should start with: &apos;{1}&apos;.
        /// </summary>
        public static string MiKo_2060_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_2060_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Factories should be documented in a uniform way..
        /// </summary>
        public static string MiKo_2060_Title {
            get {
                return ResourceManager.GetString("MiKo_2060_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, use the pre-defined .NET Framework delegate types such as &apos;Action&apos;, &apos;Func&apos; or &apos;Expression&apos; instead of custom delegates..
        /// </summary>
        public static string MiKo_3001_Description {
            get {
                return ResourceManager.GetString("MiKo_3001_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/events-and-callbacks.
        /// </summary>
        public static string MiKo_3001_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3001_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;Action&apos;, &apos;Func&apos; or &apos;Expression&apos; instead.
        /// </summary>
        public static string MiKo_3001_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3001_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom delegates should not be used..
        /// </summary>
        public static string MiKo_3001_Title {
            get {
                return ResourceManager.GetString("MiKo_3001_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a class has too many dependencies, that class is doing too much and does not follow the SRP..
        /// </summary>
        public static string MiKo_3002_Description {
            get {
                return ResourceManager.GetString("MiKo_3002_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many MEF dependencies: {1,4} (max. {2}).
        /// </summary>
        public static string MiKo_3002_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3002_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Classes should not have too many dependencies..
        /// </summary>
        public static string MiKo_3002_Title {
            get {
                return ResourceManager.GetString("MiKo_3002_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease usage, events should follow the .NET Framework Guidelines for Event Design..
        /// </summary>
        public static string MiKo_3003_Description {
            get {
                return ResourceManager.GetString("MiKo_3003_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/event.
        /// </summary>
        public static string MiKo_3003_HelpLinkUri {
            get {
                return ResourceManager.GetString("MiKo_3003_HelpLinkUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should use &apos;EventHandler&apos; or &apos;EventHandler&lt;T&gt;&apos;.
        /// </summary>
        public static string MiKo_3003_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3003_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events should follow .NET Framework Guidelines for events..
        /// </summary>
        public static string MiKo_3003_Title {
            get {
                return ResourceManager.GetString("MiKo_3003_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For performance reasons, it makes no sense to use &apos;object.Equals()&apos; on value types. Value types get boxed and unboxed when being casted to objects. That puts unnecessary pressure on the garbage collector as temporary objects are created and immediately get garbage collected.
        ///
        ///Instead the equality operator should be used to compare value types..
        /// </summary>
        public static string MiKo_3004_Description {
            get {
                return ResourceManager.GetString("MiKo_3004_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use &apos;==&apos; operator instead of &apos;object.Equals&apos;.
        /// </summary>
        public static string MiKo_3004_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3004_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use object.Equals() on value types..
        /// </summary>
        public static string MiKo_3004_Title {
            get {
                return ResourceManager.GetString("MiKo_3004_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, methods that are named &apos;Try&apos; should follow the Try-Pattern.
        ///
        ///That is they should return a Boolean and have the last parameter as out-parameter for the result. In the success case the method should return true and provide valid out data; in all other cases the method should return false..
        /// </summary>
        public static string MiKo_3005_Description {
            get {
                return ResourceManager.GetString("MiKo_3005_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Follow the Try-Pattern.
        /// </summary>
        public static string MiKo_3005_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3005_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods named &apos;Try&apos; should follow the Try-Pattern..
        /// </summary>
        public static string MiKo_3005_Title {
            get {
                return ResourceManager.GetString("MiKo_3005_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To ease maintenance, and being consistent with the .NET Framework classes, &apos;CancellationToken&apos; parameters should come after all the other parameters of a method..
        /// </summary>
        public static string MiKo_3006_Description {
            get {
                return ResourceManager.GetString("MiKo_3006_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should be last parameter.
        /// </summary>
        public static string MiKo_3006_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3006_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;CancellationToken&apos; parameter should be last method parameter..
        /// </summary>
        public static string MiKo_3006_Title {
            get {
                return ResourceManager.GetString("MiKo_3006_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class that is marked as a unit test class should contain unit tests..
        /// </summary>
        public static string MiKo_3101_Description {
            get {
                return ResourceManager.GetString("MiKo_3101_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should contain tests.
        /// </summary>
        public static string MiKo_3101_MessageFormat {
            get {
                return ResourceManager.GetString("MiKo_3101_MessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test classes should contain tests..
        /// </summary>
        public static string MiKo_3101_Title {
            get {
                return ResourceManager.GetString("MiKo_3101_Title", resourceCulture);
            }
        }
    }
}
